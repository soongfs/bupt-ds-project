const db = require('../config/test-database');
const upload = require('../config/multerConfig');

const diaryController = {
  getDiaryDiscovery: (req, res) => {
    // ... existing code ...
  },

  getNewDiary: (req, res) => {
    // ... existing code ...
  },

  getDiaryDetail: (req, res) => {
    // ... existing code ...
  },

  addComment: (req, res) => {
    // ... existing code ...
  },

  likeDiary: (req, res) => {
    // ... existing code ...
  },

  createDiary: (req, res) => {
    // ... existing code ...
  },

  updateDiary: (req, res) => {
    const diaryId = req.params.id;
    const userId = req.session.user.id;
    const { title, content, tips, cover_image, sections, media } = req.body;

    console.log('收到更新请求:', {
      title,
      content,
      tips,
      cover_image,
      sections: JSON.parse(sections || '[]'),
      media: JSON.parse(media || '[]'),
      files: req.files
    });

    // 首先检查用户是否有权限编辑这篇日记
    db.query(
      'SELECT user_id FROM travel_diaries WHERE id = ?',
      [diaryId],
      (err, results) => {
        if (err) {
          console.error('查询日记失败:', err);
          return res.status(500).json({
            success: false,
            message: '服务器错误'
          });
        }

        if (!results.length || results[0].user_id !== userId) {
          return res.status(403).json({
            success: false,
            message: '你没有权限编辑这篇日记'
          });
        }

        // 开始事务
        db.beginTransaction((beginErr) => {
          if (beginErr) {
            console.error('事务开始错误:', beginErr);
            return res.status(500).json({
              success: false,
              message: '数据库错误'
            });
          }

          // 更新日记基本信息
          let coverImagePath = cover_image;
          if (req.files && req.files['coverImage'] && req.files['coverImage'][0]) {
            coverImagePath = req.files['coverImage'][0].filename;
          }

          db.query(
            `UPDATE travel_diaries 
             SET title = ?, 
                 content = ?, 
                 tips = ?,
                 cover_image = ?,
                 updated_at = NOW()
             WHERE id = ? AND user_id = ?`,
            [title, content, tips, coverImagePath, diaryId, userId],
            (err) => {
              if (err) {
                return db.rollback(() => {
                  console.error('更新日记基本信息失败:', err);
                  res.status(500).json({
                    success: false,
                    message: '数据库错误'
                  });
                });
              }

              // 更新章节数据
              if (sections) {
                const parsedSections = JSON.parse(sections);
                
                // 删除旧的章节
                db.query(
                  'DELETE FROM diary_sections WHERE diary_id = ?',
                  [diaryId],
                  (err) => {
                    if (err) {
                      return db.rollback(() => {
                        console.error('删除旧章节失败:', err);
                        res.status(500).json({
                          success: false,
                          message: '数据库错误'
                        });
                      });
                    }

                    // 插入新的章节
                    let sectionsProcessed = 0;
                    
                    if (parsedSections.length === 0) {
                      handleMediaUpdate();
                    } else {
                      parsedSections.forEach((section) => {
                        db.query(
                          `INSERT INTO diary_sections 
                           (diary_id, section_title, section_content, day_number, display_order) 
                           VALUES (?, ?, ?, ?, ?)`,
                          [diaryId, section.title, section.content, section.dayNumber, section.order],
                          (err) => {
                            if (err) {
                              return db.rollback(() => {
                                console.error('插入新章节失败:', err);
                                res.status(500).json({
                                  success: false,
                                  message: '数据库错误'
                                });
                              });
                            }

                            sectionsProcessed++;
                            if (sectionsProcessed === parsedSections.length) {
                              handleMediaUpdate();
                            }
                          }
                        );
                      });
                    }
                  }
                );
              } else {
                handleMediaUpdate();
              }

              // 处理媒体文件更新
              function handleMediaUpdate() {
                if (!media) {
                  return finishTransaction();
                }

                const parsedMedia = JSON.parse(media);
                const mediaFiles = req.files && req.files['mediaFiles'] ? req.files['mediaFiles'] : [];

                // 获取现有的媒体文件
                db.query(
                  'SELECT id, media_url FROM diary_media WHERE diary_id = ?',
                  [diaryId],
                  (err, existingMedia) => {
                    if (err) {
                      return db.rollback(() => {
                        console.error('获取现有媒体文件失败:', err);
                        res.status(500).json({
                          success: false,
                          message: '数据库错误'
                        });
                      });
                    }

                    // 找出要删除的媒体文件
                    const newMediaIds = parsedMedia.map(m => m.id);
                    const mediaToDelete = existingMedia.filter(m => !newMediaIds.includes(m.id));

                    // 删除不再使用的媒体文件
                    if (mediaToDelete.length > 0) {
                      db.query(
                        'DELETE FROM diary_media WHERE id IN (?)',
                        [mediaToDelete.map(m => m.id)],
                        (err) => {
                          if (err) {
                            return db.rollback(() => {
                              console.error('删除旧媒体文件失败:', err);
                              res.status(500).json({
                                success: false,
                                message: '数据库错误'
                              });
                            });
                          }
                          processNewMedia();
                        }
                      );
                    } else {
                      processNewMedia();
                    }

                    // 处理新的媒体文件
                    function processNewMedia() {
                      let mediaProcessed = 0;
                      
                      if (parsedMedia.length === 0) {
                        finishTransaction();
                      } else {
                        parsedMedia.forEach((item) => {
                          if (item.id.startsWith('new_')) {
                            // 新增的媒体
                            let mediaUrl = item.url;
                            
                            // 如果是新上传的文件，使用新的文件名
                            const matchingFile = mediaFiles.find(f => f.originalname === item.url);
                            if (matchingFile) {
                              mediaUrl = matchingFile.filename;
                            }

                            db.query(
                              `INSERT INTO diary_media 
                               (diary_id, media_url, media_type, caption, display_order) 
                               VALUES (?, ?, ?, ?, ?)`,
                              [diaryId, mediaUrl, item.type, item.caption, item.order],
                              handleMediaQueryResult
                            );
                          } else {
                            // 更新现有媒体
                            db.query(
                              `UPDATE diary_media 
                               SET caption = ?, 
                                   display_order = ? 
                               WHERE id = ? AND diary_id = ?`,
                              [item.caption, item.order, item.id, diaryId],
                              handleMediaQueryResult
                            );
                          }
                        });
                      }

                      function handleMediaQueryResult(err) {
                        if (err) {
                          return db.rollback(() => {
                            console.error('处理媒体文件失败:', err);
                            res.status(500).json({
                              success: false,
                              message: '数据库错误'
                            });
                          });
                        }

                        mediaProcessed++;
                        if (mediaProcessed === parsedMedia.length) {
                          finishTransaction();
                        }
                      }
                    }
                  }
                );
              }

              // 完成事务
              function finishTransaction() {
                db.commit((commitErr) => {
                  if (commitErr) {
                    return db.rollback(() => {
                      console.error('事务提交错误:', commitErr);
                      res.status(500).json({
                        success: false,
                        message: '数据库错误'
                      });
                    });
                  }

                  console.log('更新成功');
                  res.json({
                    success: true,
                    message: '日记更新成功'
                  });
                });
              }
            }
          );
        });
      }
    );
  },

  rateDiary: (req, res) => {
    const diaryId = req.params.id;
    const userId = req.session.user.id;
    const { rating } = req.body;

    // 验证评分值
    if (rating < 1 || rating > 5) {
      return res.status(400).json({ error: '评分必须在1-5之间' });
    }

    // 首先检查是否已经评分过
    db.query(
      'SELECT * FROM diary_ratings WHERE diary_id = ? AND user_id = ?',
      [diaryId, userId],
      (err, results) => {
        if (err) {
          console.error(err);
          return res.status(500).json({ error: '数据库错误' });
        }

        const isUpdate = results.length > 0;
        const query = isUpdate
          ? 'UPDATE diary_ratings SET rating = ?, updated_at = NOW() WHERE diary_id = ? AND user_id = ?'
          : 'INSERT INTO diary_ratings (diary_id, user_id, rating, created_at, updated_at) VALUES (?, ?, ?, NOW(), NOW())';
        
        const params = isUpdate
          ? [rating, diaryId, userId]
          : [diaryId, userId, rating];

        db.query(query, params, (err) => {
          if (err) {
            console.error(err);
            return res.status(500).json({ error: '数据库错误' });
          }

          // 更新日记的平均评分和评分数量
          db.query(
            `SELECT 
              COUNT(*) as count,
              AVG(rating) as avg_rating 
            FROM diary_ratings 
            WHERE diary_id = ?`,
            [diaryId],
            (err, results) => {
              if (err) {
                console.error(err);
                return res.status(500).json({ error: '数据库错误' });
              }

              const { count, avg_rating } = results[0];

              db.query(
                'UPDATE travel_diaries SET rating = ?, rating_count = ? WHERE id = ?',
                [avg_rating || 0, count, diaryId],
                (err) => {
                  if (err) {
                    console.error(err);
                    return res.status(500).json({ error: '数据库错误' });
                  }

                  res.json({ 
                    message: isUpdate ? '评分更新成功' : '评分成功',
                    rating: rating,
                    avgRating: avg_rating || 0,
                    ratingCount: count
                  });
                }
              );
            }
          );
        });
      }
    );
  },

  favoriteDiary: (req, res) => {
    const diaryId = req.params.id;
    const userId = req.session.user.id;

    // 检查是否已经收藏
    db.query(
      'SELECT * FROM diary_favorites WHERE diary_id = ? AND user_id = ?',
      [diaryId, userId],
      (err, results) => {
        if (err) {
          console.error(err);
          return res.status(500).json({ error: '数据库错误' });
        }

        if (results.length > 0) {
          // 如果已收藏，则取消收藏
          db.query(
            'DELETE FROM diary_favorites WHERE diary_id = ? AND user_id = ?',
            [diaryId, userId],
            (err) => {
              if (err) {
                console.error(err);
                return res.status(500).json({ error: '数据库错误' });
              }

              // 更新日记的收藏数
              db.query(
                'UPDATE travel_diaries SET favorite_count = favorite_count - 1 WHERE id = ?',
                [diaryId],
                (err) => {
                  if (err) {
                    console.error(err);
                    return res.status(500).json({ error: '数据库错误' });
                  }

                  res.json({ message: '取消收藏成功' });
                }
              );
            }
          );
        } else {
          // 如果未收藏，则添加收藏
          db.query(
            'INSERT INTO diary_favorites (diary_id, user_id, created_at) VALUES (?, ?, NOW())',
            [diaryId, userId],
            (err) => {
              if (err) {
                console.error(err);
                return res.status(500).json({ error: '数据库错误' });
              }

              // 更新日记的收藏数
              db.query(
                'UPDATE travel_diaries SET favorite_count = favorite_count + 1 WHERE id = ?',
                [diaryId],
                (err) => {
                  if (err) {
                    console.error(err);
                    return res.status(500).json({ error: '数据库错误' });
                  }

                  res.json({ message: '收藏成功' });
                }
              );
            }
          );
        }
      }
    );
  },

  getShareLink: (req, res) => {
    const diaryId = req.params.id;
    const baseUrl = `${req.protocol}://${req.get('host')}`;
    const shareUrl = `${baseUrl}/diary-detail/${diaryId}`;
    
    res.json({ 
      url: shareUrl,
      title: '分享成功',
      message: '链接已生成'
    });
  }
};

module.exports = diaryController; 