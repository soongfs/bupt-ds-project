<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>聊天 - TravelMate</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css" />
    <script src="/socket.io/socket.io.js"></script>
    <style>
        :root {
            --primary: #2a9d8f;
            --secondary: #264653;
            --accent: #e9c46a;
            --text: #444;
            --border: #eee;
            --shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: "Segoe UI", "PingFang SC", sans-serif;
        }

        body {
            background: #f8f9fa;
            height: 100vh;
            display: flex;
            flex-direction: column;
        }

        /* 导航栏样式 */
        .global-nav {
            background: white;
            padding: 1rem;
            box-shadow: var(--shadow);
            display: flex;
            align-items: center;
            justify-content: space-between;
        }

        .nav-title {
            display: flex;
            align-items: center;
            gap: 1rem;
        }

        .back-btn {
            color: var(--primary);
            text-decoration: none;
            font-size: 1.2rem;
        }

        .chat-title {
            font-size: 1.2rem;
            color: var(--secondary);
        }

        /* 聊天区域样式 */
        .chat-container {
            flex: 1;
            display: flex;
            flex-direction: column;
            max-width: 800px;
            margin: 0 auto;
            width: 100%;
            background: white;
            box-shadow: var(--shadow);
        }

        .chat-messages {
            flex: 1;
            overflow-y: auto;
            padding: 1rem;
            display: flex;
            flex-direction: column;
            gap: 1rem;
        }

        .message {
            max-width: 70%;
            padding: 0.8rem 1rem;
            border-radius: 1rem;
            position: relative;
        }

        .message.sent {
            align-self: flex-end;
            background: var(--primary);
            color: white;
            border-bottom-right-radius: 0.3rem;
        }

        .message.received {
            align-self: flex-start;
            background: #f0f2f5;
            color: var(--text);
            border-bottom-left-radius: 0.3rem;
        }

        .message-time {
            font-size: 0.8rem;
            opacity: 0.7;
            margin-top: 0.3rem;
            text-align: right;
        }

        /* 输入区域样式 */
        .chat-input-container {
            padding: 1rem;
            background: white;
            border-top: 1px solid var(--border);
            display: flex;
            gap: 1rem;
        }

        .chat-input {
            flex: 1;
            padding: 0.8rem;
            border: 1px solid var(--border);
            border-radius: 1.5rem;
            outline: none;
            font-size: 1rem;
            resize: none;
            max-height: 100px;
            min-height: 40px;
        }

        .chat-input:focus {
            border-color: var(--primary);
        }

        .send-btn {
            background: var(--primary);
            color: white;
            border: none;
            padding: 0 1.5rem;
            border-radius: 1.5rem;
            cursor: pointer;
            font-size: 1rem;
            transition: background-color 0.3s;
        }

        .send-btn:hover {
            background: #238f82;
        }

        .send-btn:disabled {
            background: #ccc;
            cursor: not-allowed;
        }

        /* 通知样式 */
        .notification {
            position: fixed;
            top: 20px;
            right: 20px;
            padding: 1rem;
            background: white;
            border-radius: 8px;
            box-shadow: var(--shadow);
            display: flex;
            align-items: center;
            gap: 0.5rem;
            animation: slideIn 0.3s ease-out;
            z-index: 1000;
        }

        @keyframes slideIn {
            from {
                transform: translateX(100%);
                opacity: 0;
            }
            to {
                transform: translateX(0);
                opacity: 1;
            }
        }

        .notification-avatar {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            object-fit: cover;
        }

        .notification-content {
            flex: 1;
        }

        .notification-title {
            font-weight: 500;
            color: var(--secondary);
        }

        .notification-message {
            color: var(--text);
            font-size: 0.9rem;
            margin-top: 0.2rem;
        }

        /* 响应式设计 */
        @media (max-width: 768px) {
            .chat-container {
                height: 100vh;
                max-width: 100%;
            }

            .message {
                max-width: 85%;
            }
        }
    </style>
</head>
<body>
    <nav class="global-nav">
        <div class="nav-title">
            <a href="javascript:history.back()" class="back-btn">
                <i class="fas fa-arrow-left"></i>
            </a>
            <h1 class="chat-title">
                与 <%= otherUser.username %> 的对话
            </h1>
        </div>
    </nav>

    <div class="chat-container">
        <div class="chat-messages" id="chatMessages">
            <!-- 消息将通过 JavaScript 动态加载 -->
        </div>

        <div class="chat-input-container">
            <textarea 
                class="chat-input" 
                id="messageInput" 
                placeholder="输入消息..." 
                rows="1"
                onkeydown="if(event.keyCode == 13 && !event.shiftKey) { event.preventDefault(); sendMessage(); }">
            </textarea>
            <button class="send-btn" onclick="sendMessage()">
                <i class="fas fa-paper-plane"></i>
            </button>
        </div>
    </div>

    <script>
        const currentUserId = '<%= currentUser.id %>';
        const otherUserId = '<%= otherUser.id %>';
        const socket = io();
        let isTyping = false;
        let typingTimeout;

        // 连接到 Socket.IO
        socket.on('connect', () => {
            console.log('Connected to Socket.IO');
            socket.emit('join chat', { userId: currentUserId });
        });

        // 加载历史消息
        async function loadMessages() {
            try {
                const response = await fetch(`/messages/conversation/${otherUserId}`);
                const data = await response.json();
                
                if (data.success) {
                    const chatMessages = document.getElementById('chatMessages');
                    chatMessages.innerHTML = data.messages.reverse().map(msg => createMessageHTML(msg)).join('');
                    scrollToBottom();
                }
            } catch (error) {
                console.error('加载消息失败:', error);
            }
        }

        // 发送消息
        async function sendMessage() {
            const input = document.getElementById('messageInput');
            const content = input.value.trim();
            
            if (!content) return;
            
            try {
                const response = await fetch('/messages/send', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        receiverId: otherUserId,
                        content: content
                    })
                });

                const data = await response.json();
                
                if (data.success) {
                    input.value = '';
                    socket.emit('new message', {
                        senderId: currentUserId,
                        receiverId: otherUserId,
                        content: content
                    });
                }
            } catch (error) {
                console.error('发送消息失败:', error);
            }
        }

        // 创建消息 HTML
        function createMessageHTML(message) {
            const isSent = message.sender_id.toString() === currentUserId;
            const time = new Date(message.created_at).toLocaleTimeString('zh-CN', {
                hour: '2-digit',
                minute: '2-digit'
            });
            
            return `
                <div class="message ${isSent ? 'sent' : 'received'}">
                    <div class="message-content">${message.content}</div>
                    <div class="message-time">${time}</div>
                </div>
            `;
        }

        // 接收新消息
        socket.on('receive message', (message) => {
            if (message.senderId.toString() === otherUserId || 
                message.senderId.toString() === currentUserId) {
                const chatMessages = document.getElementById('chatMessages');
                chatMessages.insertAdjacentHTML('beforeend', createMessageHTML({
                    sender_id: message.senderId,
                    content: message.content,
                    created_at: new Date()
                }));
                scrollToBottom();

                // 如果消息是从其他用户发来的，标记为已读
                if (message.senderId.toString() === otherUserId) {
                    markMessageAsRead(message.messageId);
                }
            }
        });

        // 标记消息为已读
        async function markMessageAsRead(messageId) {
            try {
                await fetch(`/messages/${messageId}/read`, {
                    method: 'PUT'
                });
            } catch (error) {
                console.error('标记消息已读失败:', error);
            }
        }

        // 滚动到底部
        function scrollToBottom() {
            const chatMessages = document.getElementById('chatMessages');
            chatMessages.scrollTop = chatMessages.scrollHeight;
        }

        // 自动调整输入框高度
        const messageInput = document.getElementById('messageInput');
        messageInput.addEventListener('input', () => {
            messageInput.style.height = 'auto';
            messageInput.style.height = messageInput.scrollHeight + 'px';
        });

        // 页面加载时获取历史消息
        document.addEventListener('DOMContentLoaded', loadMessages);

        // 在页面关闭或切换时，通知服务器用户离开
        window.addEventListener('beforeunload', () => {
            socket.emit('leave chat', { userId: currentUserId });
        });
    </script>
</body>
</html> 