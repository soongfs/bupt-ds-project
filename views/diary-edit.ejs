<!DOCTYPE html>
<html lang="zh-CN">

<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>发布新日记 - TravelMate</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet" />
    <!-- 引入 wangEditor 样式 -->
    <link href="https://unpkg.com/@wangeditor/editor@latest/dist/css/style.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/marked/marked.min.js"></script>
    <style>
        :root {
            --primary: #2a9d8f;
            --secondary: #264653;
            --border: #e0e0e0;
            --bg: #f8f9fa;
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: "Segoe UI", "PingFang SC", sans-serif;
        }

        body {
            background: var(--bg);
        }

        .editor-container {
            max-width: 800px;
            margin: 2rem auto;
            background: white;
            border-radius: 8px;
            box-shadow: 0 2px 12px rgba(0, 0, 0, 0.1);
            padding: 2rem;
        }

        /* 标题区域 */
        .title-section {
            margin-bottom: 2rem;
        }

        .title-input {
            width: 100%;
            font-size: 2rem;
            border: none;
            padding: 1rem;
            font-weight: 600;
            color: var(--secondary);
        }

        .title-input::placeholder {
            color: #999;
        }

        /* 工具栏 - 修改为适应 wangEditor 的样式 */
        .toolbar {
            border: 1px solid var(--border);
            border-bottom: none;
            padding: 0.5rem;
            display: flex;
            flex-wrap: wrap;
            gap: 0.2rem;
        }

        /* 编辑区域 - 修改为适应 wangEditor 的样式 */
        .editor-wrapper {
            border: 1px solid var(--border);
            border-radius: 0 0 4px 4px;
            margin-bottom: 2rem;
        }

        .editor-content {
            min-height: 400px;
            padding: 1rem;
            overflow-y: auto;
        }

        /* 附加功能 */
        .upload-section {
            margin-bottom: 2rem;
        }

        .upload-btn { /* General upload button style */
            display: inline-flex;
            align-items: center;
            gap: 0.5rem;
            padding: 0.8rem 1.5rem;
            background: var(--bg);
            border: 1px dashed var(--border);
            border-radius: 4px;
            cursor: pointer;
        }

        .upload-btn:hover {
            border-color: var(--primary);
        }

        /* 设置区域 */
        .settings-section {
            border-top: 1px solid var(--border);
            padding-top: 2rem;
        }

        .setting-item {
            margin-bottom: 1.5rem;
        }

        .setting-label {
            display: block;
            margin-bottom: 0.5rem;
            font-weight: 500;
        }

        .tag-input { /* Original tag input, may be replaced by EJS generated tags */
            padding: 0.5rem;
            border: 1px solid var(--border);
            border-radius: 4px;
            width: 300px;
        }

        .tag-hint { /* Hint for original tag input */
            color: #666;
            font-size: 0.9rem;
            margin-top: 0.5rem;
        }

        /* 发布按钮 */
        .publish-btns {
            display: flex;
            gap: 1rem;
            margin-top: 2rem;
        }

        .btn-primary {
            background: var(--primary);
            color: white;
            padding: 0.8rem 2rem;
            border: none;
            border-radius: 4px;
            cursor: pointer;
        }

        .btn-secondary { /* Used by "一键润色" and "添加新的一天" */
            background: var(--bg);
            color: var(--secondary);
            padding: 0.8rem 1.5rem; /* Matched upload-btn for consistency */
            border: 1px solid var(--border);
            border-radius: 4px;
            cursor: pointer;
            display: inline-flex;
            align-items: center;
            justify-content: center;
            gap: 0.5rem;
            vertical-align: middle;
        }
        /* Specific style for polishTextBtn to override .btn-secondary if needed */
        #polishTextBtn {
            margin-left: auto; /* Pushes it to the right if in a flex container */
            background-color: #2a9d8f;
            color: white;
            font-family: 'Arial', sans-serif;
            font-size: 15px;
            font-weight: bold;
        }


        .sections-container,
        .media-container {
            margin-bottom: 2rem;
            border-top: 1px solid var(--border);
            padding-top: 1.5rem;
        }
        .media-container h3 { /* Match sections-container h3 style */
            color: var(--secondary);
            margin-bottom: 1rem;
            font-size: 1.2rem;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }
        .media-container h3::before { /* Match sections-container h3::before */
             content: "";
             display: inline-block;
             width: 4px;
             height: 1.2rem;
             background: var(--primary);
             border-radius: 2px;
        }


        .section-item, /* Combined common styles */
        .media-item {
            background: white; /* Changed from var(--bg) for better contrast */
            padding: 1.5rem;
            border-radius: 8px;
            margin-bottom: 1.5rem;
            border: 1px solid var(--border);
            box-shadow: 0 2px 6px rgba(0, 0, 0, 0.05);
            transition: all 0.3s ease;
            position: relative;
        }
        .section-item:hover,
        .media-item:hover {
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
            transform: translateY(-2px);
        }

        .section-header,
        .media-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 1rem;
            padding-bottom: 0.5rem;
            border-bottom: 1px dashed var(--border);
        }
        .media-header span { /* For "媒体 #N" */
            color: var(--primary);
            font-weight: 500;
        }


        .section-title, /* Combined input/textarea styles */
        .media-caption,
        .section-content {
            width: 100%;
            padding: 0.8rem;
            margin-bottom: 1rem;
            border: 1px solid var(--border);
            border-radius: 6px;
            font-size: 1rem;
            transition: border 0.3s, box-shadow 0.3s;
        }
        .section-title:focus,
        .media-caption:focus,
        .section-content:focus {
            outline: none;
            border-color: var(--primary);
            box-shadow: 0 0 0 2px rgba(42, 157, 143, 0.2);
        }
        .section-content { /* Specific to textarea */
            min-height: 120px;
            font-size: 0.95rem;
            line-height: 1.6;
            resize: vertical;
        }


        .remove-btn {
            color: #ff6b6b;
            background: none;
            border: none;
            cursor: pointer;
            font-size: 1rem;
            padding: 0.3rem;
            border-radius: 50%;
            width: 28px;
            height: 28px;
            display: flex;
            align-items: center;
            justify-content: center;
            transition: all 0.2s;
        }
        .remove-btn:hover {
            background: rgba(255, 107, 107, 0.1);
            transform: scale(1.1);
        }

        .media-preview-container { /* Container for preview */
            margin-top: 0.5rem;
            margin-bottom: 1rem;
        }
        .media-preview { /* img or video */
            max-width: 200px;
            max-height: 200px;
            display: block; /* Remove extra space below */
            border-radius: 4px;
            border: 1px solid var(--border);
        }
        .media-hint {
            color: #666;
            font-size: 0.9rem;
            margin-top: 0.5rem;
        }
        /* Button for "用此图提问AI" within a media item */
        .media-item .ask-ai-with-media-btn {
            margin-top: 0.5rem;
            padding: 0.5rem 1rem;
            font-size: 0.9rem;
        }


        .sections-container h3 {
            color: var(--secondary);
            margin-bottom: 1rem;
            font-size: 1.2rem;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }
        .sections-container h3::before {
            content: "";
            display: inline-block;
            width: 4px;
            height: 1.2rem;
            background: var(--primary);
            border-radius: 2px;
        }
        #sections-list {
            margin-bottom: 1rem;
        }
        .section-header h4 {
            color: var(--primary);
            font-size: 1.1rem;
            margin: 0;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }
        .section-header h4::before {
            content: "✈";
            font-size: 0.9rem;
        }
        #add-section-btn {
            background: white; /* Different from .btn-secondary default */
            border: 1px dashed var(--primary);
            color: var(--primary);
            font-weight: 500;
        }
        #add-section-btn:hover {
            background: rgba(42, 157, 143, 0.1);
            border-style: solid;
        }
        .day-number-badge {
            background: var(--primary);
            color: white;
            width: 24px;
            height: 24px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 0.8rem;
            margin-right: 0.5rem;
        }

        /* EJS Generated Tag Styles */
        .tag-selection {
            margin-bottom: 2rem;
        }
        .tag-groups {
            display: grid;
            gap: 1.5rem;
            /* Consider more columns for wider screens */
            /* grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); */
        }
        .tag-group h5 {
            margin-bottom: 1rem;
            color: #2a9d8f; /* var(--primary) */
            font-weight: 600;
            border-bottom: 2px solid #eee; /* var(--border) */
            padding-bottom: 0.5rem;
        }
        .tag-options {
            display: flex;
            flex-wrap: wrap;
            gap: 0.8rem;
        }
        .tag-option {
            display: inline-flex; /* Changed from inline-flex */
            align-items: center;
            margin: 0;
            cursor: pointer;
        }
        .tag-option input[type="checkbox"] {
            display: none;
        }
        .tag-label {
            display: inline-flex;
            align-items: center;
            gap: 0.5rem;
            padding: 0.5rem 1rem;
            border-radius: 20px;
            background: #f0f0f0; /* Lighter than --bg for contrast */
            border: 1px solid #ddd; /* Lighter than --border */
            transition: all 0.2s ease-in-out;
            font-size: 0.9rem;
            color: #555; /* Darker text for readability */
        }
        .tag-option input[type="checkbox"]:checked + .tag-label {
            background: #2a9d8f; /* var(--primary) */
            color: white;
            border-color: #268d81; /* Slightly darker primary for border */
            box-shadow: 0 2px 4px rgba(42, 157, 143, 0.2);
        }
        .tag-label i {
            font-size: 0.9em;
            margin-right: 3px; /* Added slight margin for icon */
        }
        .tag-option:hover .tag-label {
            border-color: #2a9d8f; /* var(--primary) */
            background: #e6f5f3; /* Light primary on hover */
        }
        .tag-option input[type="checkbox"]:checked:hover + .tag-label {
            background: #238478; /* Darker primary on hover when checked */
        }

        /* --- Chat Assistant Styles --- */
        .chat-container {
            position: fixed;
            right: 20px;
            bottom: 20px;
            max-width: 400px;
            width: 90%;
            background: white;
            border-radius: 8px;
            box-shadow: 0 2px 12px rgba(0, 0, 0, 0.15);
            z-index: 10000; /* Ensure it's above other elements */
            display: flex;
            flex-direction: column;
            max-height: 70vh;
        }
        .chat-header {
            background: var(--primary);
            color: white;
            padding: 10px 15px;
            font-size: 1rem;
            border-top-left-radius: 8px;
            border-top-right-radius: 8px;
            flex-shrink: 0;
        }
        .chat-body {
            flex-grow: 1;
            padding: 10px;
            overflow-y: auto;
            min-height: 150px;
        }
        .message { /* General message style, specific user/bot styles below */
            margin: 8px 0;
            padding: 10px;
            border-radius: 6px;
            line-height: 1.4;
            word-wrap: break-word;
            display: flex;
            flex-direction: column; /* Content and button stack vertically */
        }
        .message.user { /* User message specific */
            background: #d1e7dd; /* Light green */
            align-self: flex-end;
            margin-left: auto; /* Push to right */
        }
        .message.user .user-message { /* Span inside user message for text */
             text-align: right;
             display: block;
        }
        .message.bot { /* Bot message specific */
            background: #f8f9fa; /* var(--bg) */
            align-self: flex-start;
            border-left: 4px solid var(--primary);
        }
        .message.bot .bot-message { /* Span inside bot message for text/HTML */
            display: block;
        }
        .chat-footer {
            display: flex;
            align-items: center;
            padding: 10px;
            border-top: 1px solid var(--border);
            flex-shrink: 0;
        }
        .chat-input {
            flex-grow: 1;
            padding: 8px 12px;
            border: 1px solid #ccc;
            border-radius: 4px;
            height: 36px;
            box-sizing: border-box;
            font-size: 0.9rem;
        }
        .chat-send-btn { /* Send button in chat */
            margin-left: 8px;
            padding: 0 15px;
            background: var(--primary);
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            height: 36px;
            font-size: 0.9rem;
            display: inline-flex;
            align-items: center;
            justify-content: center;
        }
        .chat-send-btn:hover {
            background: #268074; /* Darker primary */
        }
        .insert-btn { /* "Insert to editor" button in chat */
            margin-left: 0;
            margin-top: 8px;
            background-color: #4CAF50; /* Green */
            color: white;
            border: none;
            padding: 6px 10px;
            cursor: pointer;
            border-radius: 4px;
            display: inline-block;
            align-self: flex-start; /* Align to left within bot message */
            font-size: 0.85rem;
        }
        .insert-btn:hover {
            background-color: #45a049; /* Darker green */
        }
        #chatImagePreviewContainer {
            padding: 5px 10px;
            background-color: #f9f9f9;
            border-top: 1px solid #eee;
            border-bottom: 1px solid #eee;
            max-height: 85px;
            overflow-x: auto;
            overflow-y: hidden;
            display: flex;
            align-items: center;
            flex-shrink: 0;
            white-space: nowrap;
        }
        #chatImagePreviewContainer .preview-item {
            display: inline-flex;
            align-items: flex-start;
            margin-right: 8px;
            position: relative;
            border: 1px solid #ddd;
            padding: 2px;
            background-color: white;
            border-radius: 4px;
        }
        #chatImagePreviewContainer img.chat-preview-image {
            width: 60px;
            height: 60px;
            object-fit: cover;
            border-radius: 3px;
            display: block;
        }
        #chatImagePreviewContainer .remove-preview-btn {
            font-size: 12px;
            line-height: 1;
            color: white;
            background-color: rgba(0, 0, 0, 0.6);
            border-radius: 50%;
            width: 16px;
            height: 16px;
            display: inline-flex;
            align-items: center;
            justify-content: center;
            text-decoration: none;
            cursor: pointer;
            position: absolute;
            top: -6px;
            right: -6px;
            border: 1px solid white;
            box-shadow: 0 0 3px rgba(0,0,0,0.3);
        }
        #chatImagePreviewContainer .remove-preview-btn:hover {
            background-color: rgba(255,0,0,0.8);
        }
        .chat-upload-btn { /* Paperclip icon button for chat image upload */
            padding: 0;
            margin-right: 8px;
            cursor: pointer;
            border: 1px solid #ccc;
            border-radius: 4px;
            background-color: #f0f0f0;
            display: inline-flex;
            align-items: center;
            justify-content: center;
            width: 36px;
            height: 36px;
            box-sizing: border-box;
        }
        .chat-upload-btn:hover {
            background-color: #e0e0e0;
        }
        .chat-upload-btn i {
            color: #555;
            font-size: 1.1em;
        }

    </style>
</head>

<body>
    <div class="editor-container">
        <form id="diaryForm">
            <div class="title-section">
                <input type="text" class="title-input" id="title" name="title" placeholder="请输入日记标题（最多50字）"
                    maxlength="50" required />
            </div>

            <div id="editor-container">
                <div class="toolbar" id="toolbar-container"></div>
                <div class="editor-wrapper">
                    <div class="editor-content" id="editor-content"></div>
                </div>
            </div>

            <div class="upload-section" style="display: flex; align-items: center;"> <!-- Flex container for alignment -->
                <label class="upload-btn">
                    <i class="fas fa-cloud-upload-alt"></i>
                    上传封面图片
                    <input type="file" id="coverImage" name="coverImage" hidden accept="image/*" />
                </label>
                <!-- "一键润色" 按钮现在使用其自身的 ID 样式，并用 margin-left: auto 推到右边 -->
                <button type="button" id="polishTextBtn" class="btn-secondary">
                    <i class="fas fa-magic"></i>
                    一键润色
                </button>
                <div id="imagePreview" style="margin-top: 10px; margin-left: 10px;"></div> <!-- Added margin for preview -->
            </div>

            <div class="sections-container">
                <h3>行程分段</h3>
                <div id="sections-list">
                </div>
                <button type="button" id="add-section-btn" class="btn-secondary">
                    <i class="fas fa-plus"></i> 添加新的一天
                </button>
            </div>

            <div class="media-container">
                <h3>媒体管理</h3>
                <div id="media-list">
                    <!-- 媒体项将动态添加到这里, 包含 ask-ai-with-media-btn -->
                </div>
                <div class="media-upload">
                    <label class="upload-btn">
                        <i class="fas fa-cloud-upload-alt"></i>
                        上传图片/视频
                        <input type="file" id="mediaUpload" name="media" hidden multiple accept="image/*,video/*" />
                    </label>
                    <div class="media-hint">可以上传多张图片或视频</div>
                </div>
            </div>

            <div class="settings-section">
                <div class="setting-item">
                    <label class="setting-label">选择标签</label>
                    <div class="tag-selection">
                        <% const allTags = [
                            { name: '摄影日记', icon: 'fa-camera', category: 'activity' },
                            { name: '美食之旅', icon: 'fa-utensils', category: 'activity' },
                            { name: '户外探险', icon: 'fa-hiking', category: 'activity' },
                            { name: '登山露营', icon: 'fa-mountain', category: 'activity' },
                            { name: '自驾旅游', icon: 'fa-car', category: 'transport' },
                            { name: '徒步旅行', icon: 'fa-walking', category: 'activity' },
                            { name: '城市观光', icon: 'fa-city', category: 'style' },
                            { name: '文化探索', icon: 'fa-landmark', category: 'culture' },
                            { name: '海滨度假', icon: 'fa-umbrella-beach', category: 'style' },
                            { name: '乡村游记', icon: 'fa-home', category: 'style' },
                            { name: '背包旅行', icon: 'fa-backpack', category: 'style' },
                            { name: '亲子游记', icon: 'fa-child', category: 'theme' },
                            { name: '情侣出行', icon: 'fa-heart', category: 'theme' },
                            { name: '古迹探访', icon: 'fa-monument', category: 'culture' },
                            { name: '购物游记', icon: 'fa-shopping-bag', category: 'activity' }
                        ]; %>
                        <div class="tag-groups">
                            <% const categories = {
                                activity: '活动类型', style: '旅行方式', theme: '主题特色',
                                culture: '文化体验', transport: '交通方式'
                            }; %>
                            <% Object.entries(categories).forEach(([category, categoryName]) => { %>
                                <div class="tag-group">
                                    <h5><%= categoryName %></h5>
                                    <div class="tag-options">
                                        <% allTags.filter(tag => tag.category === category).forEach(tag => { %>
                                            <label class="tag-option">
                                                <input type="checkbox" name="tags[]" value="<%= tag.name %>" 
                                                    <% if (typeof diary !== 'undefined' && diary && diary.tags && diary.tags.includes(tag.name)) { %>checked<% } %>>
                                                <span class="tag-label">
                                                    <i class="fas <%= tag.icon %>"></i>
                                                    <%= tag.name %>
                                                </span>
                                            </label>
                                        <% }); %>
                                    </div>
                                </div>
                            <% }); %>
                        </div>
                    </div>
                </div>

                <div class="setting-item">
                    <label class="setting-label">发布设置</label>
                    <div style="display: flex; gap: 2rem">
                        <label> <input type="checkbox" name="allowComments" checked /> 允许评论 </label>
                        <label> <input type="checkbox" name="syncToProfile" checked /> 同步到个人主页 </label>
                        <label> <input type="checkbox" name="fansOnly" /> 仅粉丝可见 </label>
                    </div>
                </div>
            </div>

            <div class="publish-btns">
                <button type="button" class="btn-primary" id="publishBtn">立即发布</button>
                <button type="button" class="btn-secondary" id="saveDraftBtn">保存草稿</button>
            </div>
        </form>
    </div>

    <!-- Chat Assistant HTML -->
    <div class="chat-container">
        <div class="chat-header">TravelMate 旅游日记助手</div>
        <div class="chat-body" id="chatBox"></div>
        <div id="chatImagePreviewContainer">
            <!-- Preview will show here -->
        </div>
        <div class="chat-footer">
            <label for="chatImageUpload" class="chat-upload-btn" title="上传图片">
                <i class="fas fa-paperclip"></i>
            </label>
            <input type="file" id="chatImageUpload" accept="image/*" style="display: none;">
            <input type="text" id="userInput" class="chat-input" placeholder="输入消息..." />
            <button class="chat-send-btn" id="chatSendButton">发送</button>
        </div>
    </div>

    <!-- WangEditor Script -->
    <script src="https://unpkg.com/@wangeditor/editor@latest/dist/index.js"></script>
    <script>
        // This is the MAIN SCRIPT for the EJS page (wangEditor, form handling, etc.)
        document.addEventListener('DOMContentLoaded', function () {
            const publishBtn = document.getElementById('publishBtn');
            const saveDraftBtn = document.getElementById('saveDraftBtn');
            const coverImageInput = document.getElementById('coverImage');
            const imagePreview = document.getElementById('imagePreview');
            // Removed chatBox, polishTextBtn, chatInput from here as they are handled by the chat assistant script

            // Initialize wangEditor
            const { createEditor, createToolbar } = window.wangEditor;
            const editorConfig = {
                placeholder: '从这里开始书写你的旅行故事...',
                onChange(editor) { /* ... */ },
                MENU_CONF: {
                    uploadImage: {
                        server: '/api/upload-image', fieldName: 'image', maxFileSize: 10 * 1024 * 1024,
                        allowedFileTypes: ['image/*'],
                        customInsert(res, insertFn) {
                            if (res.success) insertFn(res.data.url, '', '');
                            else alert('图片上传失败: ' + res.message);
                        },
                        onError(file, err, res) { alert('图片上传出错: ' + (err.message || '未知错误')); }
                    },
                    uploadVideo: {
                        server: '/api/upload-video', fieldName: 'video', maxFileSize: 50 * 1024 * 1024,
                        allowedFileTypes: ['video/*'],
                        customInsert(res, insertFn) {
                            if (res.success) insertFn(res.data.url, '');
                            else alert('视频上传失败: ' + res.message);
                        }
                    }
                }
            };
            const editor = createEditor({ selector: '#editor-content', config: editorConfig, mode: 'default' });
            window.editor = editor; // Expose editor instance globally for chat assistant
            editor.on('input', () => {
                if (editor.getHtml().trim() === '<p>从这里开始书写你的旅行故事...</p>') editor.setHtml('<p></p>');
            });
            createToolbar({ editor, selector: '#toolbar-container', config: { excludeKeys: ['group-video', 'fullScreen'] }, mode: 'default' });

            coverImageInput.addEventListener('change', function (e) {
                if (e.target.files.length > 0) {
                    const file = e.target.files[0];
                    const reader = new FileReader();
                    reader.onload = function (event) {
                        imagePreview.innerHTML = `<img src="${event.target.result}" style="max-width: 200px; max-height: 200px;" /><p>${file.name}</p>`;
                    };
                    reader.readAsDataURL(file);
                }
            });

            publishBtn.addEventListener('click', () => submitDiary(2));
            saveDraftBtn.addEventListener('click', () => submitDiary(1));

            const sectionsList = document.getElementById('sections-list');
            const addSectionBtn = document.getElementById('add-section-btn');
            let sectionCounter = 1;
            function addSection(dayNumber = null, title = '', content = '') {
                const dayNum = dayNumber || sectionCounter;
                const sectionId = `section-${Date.now()}`;
                sectionsList.insertAdjacentHTML('beforeend', `
                    <div class="section-item" id="${sectionId}" data-day="${dayNum}">
                        <div class="section-header"><h4><span class="day-number-badge">${dayNum}</span> 第 ${dayNum} 天</h4><button type="button" class="remove-btn" onclick="removeSection('${sectionId}')"><i class="fas fa-times"></i></button></div>
                        <input type="text" class="section-title" placeholder="这一天的主要行程或地点" value="${title}" />
                        <textarea class="section-content" placeholder="详细描述这一天的经历...">${content}</textarea>
                    </div>`);
                if (!dayNumber) sectionCounter++;
            }
            addSectionBtn.addEventListener('click', () => addSection());

            const mediaList = document.getElementById('media-list');
            const mediaUpload = document.getElementById('mediaUpload');
            let mediaItemCounter = 1; // Changed from mediaCounter to avoid conflict with chat script
            window.mediaFileObjects = window.mediaFileObjects || {}; // Ensure it exists for chat script

            function addMediaItem(file, url = null, caption = '', type = null) {
                const mediaId = `media-item-${Date.now()}`; // Ensure unique ID for media items
                const mediaType = type || (file.type.startsWith('video') ? 'video' : 'image');
                const mediaUrl = url || URL.createObjectURL(file);
                window.mediaFileObjects[mediaId] = file; // Store the File object for AI interaction

                mediaList.insertAdjacentHTML('beforeend', `
                    <div class="media-item" id="${mediaId}" data-type="${mediaType}">
                        <div class="media-header"><span>媒体 #${mediaItemCounter++}</span><button type="button" class="remove-btn" onclick="removeMedia('${mediaId}')"><i class="fas fa-times"></i></button></div>
                        <input type="text" class="media-caption" placeholder="媒体描述" value="${caption}" />
                        <div class="media-preview-container">
                            ${mediaType === 'image' ? `<img src="${mediaUrl}" class="media-preview" />` : `<video controls src="${mediaUrl}" class="media-preview"></video>`}
                        </div>
                        <input type="hidden" name="media_file_name" value="${file.name}" /> <!-- Store original file name -->
                        <!-- Add button for AI interaction -->
                        <button type="button" class="ask-ai-with-media-btn btn-secondary" style="font-size:0.85rem; padding: 0.4rem 0.8rem;">
                            <i class="fas fa-robot"></i> 用此图/视频提问AI
                        </button>
                    </div>`);
            }
            mediaUpload.addEventListener('change', function (e) {
                Array.from(e.target.files).forEach(file => addMediaItem(file));
                e.target.value = '';
            });

            window.removeSection = (id) => document.getElementById(id)?.remove();
            window.removeMedia = (id) => {
                document.getElementById(id)?.remove();
                delete window.mediaFileObjects[id]; // Clean up stored file object
            };

            function submitDiary(status) {
                const title = document.getElementById('title').value;
                const content = window.editor.getHtml();
                
                const selectedTags = [];
                document.querySelectorAll('input[name="tags[]"]:checked').forEach(checkbox => {
                    selectedTags.push(checkbox.value);
                });
                const tagsString = selectedTags.join(',');

                const allowComments = document.querySelector('input[name="allowComments"]').checked;
                const syncToProfile = document.querySelector('input[name="syncToProfile"]').checked;
                const fansOnly = document.querySelector('input[name="fansOnly"]').checked;
                const sections = Array.from(document.querySelectorAll('.section-item')).map(s => ({
                    dayNumber: parseInt(s.dataset.day),
                    title: s.querySelector('.section-title').value,
                    content: s.querySelector('.section-content').value,
                    order: parseInt(s.dataset.day)
                }));
                
                const mediaItemsData = Array.from(document.querySelectorAll('.media-item')).map((mediaEl, index) => {
                    const file = window.mediaFileObjects[mediaEl.id];
                    return {
                        url: file ? null : mediaEl.querySelector('.media-preview').src,
                        fileName: file ? file.name : null,
                        type: mediaEl.dataset.type,
                        caption: mediaEl.querySelector('.media-caption').value,
                        order: index + 1
                    };
                });

                if (!title.trim()) {
                    alert('请输入日记标题');
                    return;
                }
                if (!content.trim() || content === '<p>从这里开始书写你的旅行故事...</p>') {
                    alert('请输入日记内容');
                    return;
                }

                const formData = new FormData();
                formData.append('title', title);
                formData.append('content', content);
                formData.append('tags', tagsString);
                formData.append('allowComments', allowComments);
                formData.append('syncToProfile', syncToProfile);
                formData.append('fansOnly', fansOnly);
                formData.append('status', status);
                formData.append('sections', JSON.stringify(sections));
                formData.append('mediaData', JSON.stringify(mediaItemsData));

                // 添加封面图片
                if (coverImageInput.files.length > 0) {
                    formData.append('coverImage', coverImageInput.files[0]);
                }
                
                // 添加媒体文件
                Object.values(window.mediaFileObjects).forEach((file, index) => {
                    if (file instanceof File) {
                        formData.append(`mediaFiles`, file);
                    }
                });

                // 打印 FormData 内容以便调试
                console.log('FormData contents:');
                for (let pair of formData.entries()) {
                    console.log(pair[0], pair[1]);
                }

                fetch('/api/diaries', {
                    method: 'POST',
                    body: formData,
                    credentials: 'include'
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        alert(status === 2 ? '日记发布成功！' : '草稿保存成功！');
                        window.location.href = '/user/diaries';
                    } else {
                        throw new Error(data.message || '操作失败');
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    alert('发生错误: ' + error.message);
                });
            }
        });
    </script>

    <!-- Chat Assistant Script -->
    <script>
        // ===== Chat Assistant Coze API Script =====
        (function() { // IIFE to encapsulate chat assistant logic
            const COZE_API_BASE_URL = 'https://api.coze.cn';
            const COZE_ACCESS_TOKEN = 'pat_QRPpeZbkbheuqvhgIwvTXmNhzuR5Z3qZCOd1ZOU3wzF9MO3EMLzL29qdiQH5Juqw'; // ★★★ REPLACE THIS ★★★
            const COZE_BOT_ID = '7500528781573537802';       // ★★★ REPLACE THIS ★★★
            const COZE_USER_ID = 'travelmate_diary_user_001';

            const API_URL_CREATE_CONVERSATION = `${COZE_API_BASE_URL}/v1/conversation/create`;
            const API_URL_CHAT_BASE = `${COZE_API_BASE_URL}/v3/chat`;
            const API_URL_FILE_UPLOAD = `${COZE_API_BASE_URL}/v1/files/upload`;
            const API_URL_RETRIEVE_CHAT_DETAILS = `${COZE_API_BASE_URL}/v3/chat/retrieve`;
            const API_URL_LIST_CONVERSATION_MESSAGES = `${COZE_API_BASE_URL}/v1/conversation/message/list`;

            let currentCozeConversationId = null;
            let selectedChatImageFile = null; // For image selected via chat's own upload button

            // DOM elements for chat (ensure they are available when this script runs)
            let chatBoxEl, chatUserInputEl, chatSendButtonEl, chatImageUploadInputEl, chatImagePreviewContainerEl, mainPolishTextBtnEl;

            function initChatDOMElements() {
                chatBoxEl = document.getElementById('chatBox');
                chatUserInputEl = document.getElementById('userInput');
                chatSendButtonEl = document.getElementById('chatSendButton');
                chatImageUploadInputEl = document.getElementById('chatImageUpload');
                chatImagePreviewContainerEl = document.getElementById('chatImagePreviewContainer');
                mainPolishTextBtnEl = document.getElementById('polishTextBtn'); // The main "一键润色" button
            }

            function addChatMessage(text, type) {
                if (!chatBoxEl) return null;
                const msgDiv = document.createElement('div');
                msgDiv.className = `message ${type === 'bot-opening' ? 'bot' : type}`;
                const contentSpan = document.createElement('span');
                contentSpan.className = (type === 'user') ? 'user-message' : 'bot-message';
                if (type === 'user') {
                    contentSpan.textContent = text;
                } else {
                    contentSpan.innerHTML = text;
                }
                msgDiv.appendChild(contentSpan);
                chatBoxEl.appendChild(msgDiv);
                chatBoxEl.scrollTop = chatBoxEl.scrollHeight;
                return msgDiv;
            }

            function updateChatMessage(messageElement, newText, isFinal = false) {
                if (!messageElement) return;
                let contentSpan = messageElement.querySelector('.bot-message');
                if (!contentSpan && messageElement.classList.contains('bot')) {
                    messageElement.innerHTML = ''; 
                    const newSpan = document.createElement('span'); newSpan.className = 'bot-message';
                    messageElement.appendChild(newSpan); contentSpan = newSpan;
                } else if (!contentSpan) { contentSpan = messageElement; }

                let displayText = newText;
                if (typeof displayText === 'string') {
                    if (messageElement.classList.contains('bot-opening')) {
                        displayText = displayText.replace(/\n/g, '<br>');
                    } else if (typeof marked === 'function' && messageElement.classList.contains('bot')) {
                        try { displayText = marked.parse(displayText); }
                        catch (e) { displayText = displayText.replace(/\n/g, '<br>'); }
                    } else { displayText = displayText.replace(/\n/g, '<br>'); }
                } else if (displayText === null || typeof displayText === 'undefined') { displayText = ''; }
                contentSpan.innerHTML = displayText;

                const existingInsertBtn = messageElement.querySelector('.insert-btn');
                if (isFinal && messageElement.classList.contains('bot') && !existingInsertBtn && newText &&
                    !String(newText).toLowerCase().includes("正在") && !String(newText).toLowerCase().includes("获取") &&
                    !String(newText).toLowerCase().includes("出错") &&!String(newText).toLowerCase().includes("失败")) {
                    const insertBtn = document.createElement('button');
                    insertBtn.className = 'insert-btn'; insertBtn.textContent = '插入到编辑器';
                    messageElement.appendChild(insertBtn);
                } else if (!isFinal && existingInsertBtn) { existingInsertBtn.remove(); }
                if (chatBoxEl) chatBoxEl.scrollTop = chatBoxEl.scrollHeight;
            }

            function simulateTypingEffect(messageElement, fullText, showButtonAtEnd = false) {
                // ... (simulateTypingEffect logic - same as provided before)
                if (!messageElement) { console.error("simulateTypingEffect: messageElement is null"); return; }
                let contentSpan = messageElement.querySelector('.bot-message');
                if (!contentSpan && messageElement.classList.contains('bot')) {
                    messageElement.innerHTML = '<span class="bot-message"></span>';
                    contentSpan = messageElement.querySelector('.bot-message');
                } else if (!contentSpan) {
                    console.error("simulateTypingEffect: .bot-message span not found or invalid element.");
                    return;
                }
                let index = 0; const speed = 30; let currentTextForTyping = ""; contentSpan.innerHTML = "";
                function type() {
                    if (index < fullText.length) {
                        const char = fullText.charAt(index);
                        currentTextForTyping += (char === '\n' ? '<br>' : char);
                        contentSpan.innerHTML = currentTextForTyping; index++;
                        if (chatBoxEl) chatBoxEl.scrollTop = chatBoxEl.scrollHeight;
                        setTimeout(type, speed);
                    } else { updateChatMessage(messageElement, fullText, showButtonAtEnd); }
                }
                type();
            }

            async function ensureCozeConv() {
                // ... (ensureCozeConversation logic - same as provided before)
                if (currentCozeConversationId) return currentCozeConversationId;
                const reqBody = { bot_id: COZE_BOT_ID };
                try {
                    const resp = await fetch(API_URL_CREATE_CONVERSATION, { method: 'POST', headers: {'Authorization': `Bearer ${COZE_ACCESS_TOKEN}`, 'Content-Type': 'application/json', 'Accept': 'application/json'}, body: JSON.stringify(reqBody) });
                    if (!resp.ok) { const errText = await resp.text(); let errMsg = `HTTP ${resp.status}`; try { const errJson = JSON.parse(errText); errMsg = errJson.msg || errMsg; } catch (e) {} throw new Error(`Failed to create conversation: ${errMsg}`); }
                    const data = await resp.json();
                    if (data.code === 0 && data.data && data.data.id) { currentCozeConversationId = data.data.id; return currentCozeConversationId; }
                    else { throw new Error(data.msg || "Invalid data from create conversation API"); }
                } catch (e) { console.error("Error creating Coze conversation:", e); throw e; }
            }

            async function cozeSendImageAndText(textPrompt, imageFile, loadingMsgElToUpdate) {
                // ... (sendImageAndTextToCoze logic - same as provided before, renamed to avoid conflict)
                const loadingMsgEl = loadingMsgElToUpdate || addChatMessage("正在处理...", 'bot');
                try {
                    const convId = await ensureCozeConv(); if (!convId) { updateChatMessage(loadingMsgEl, "无法获取会话。", true); return; }
                    let chatUrl = `${API_URL_CHAT_BASE}?conversation_id=${convId}`; let additionalMessages = [];
                    let textForContent = textPrompt && textPrompt.trim() !== "" ? textPrompt.trim() : (imageFile ? "请描述这张图片。" : "你好");
                    if (imageFile) {
                        updateChatMessage(loadingMsgEl, "上传图片中...", false); let fileId; const formData = new FormData(); formData.append('file', imageFile);
                        const uploadResp = await fetch(API_URL_FILE_UPLOAD, { method: 'POST', headers: { 'Authorization': `Bearer ${COZE_ACCESS_TOKEN}` }, body: formData });
                        if (!uploadResp.ok) { const errText = await uploadResp.text(); let errMsg = `HTTP ${uploadResp.status}`; try { const errJson = JSON.parse(errText); errMsg = errJson.msg || errMsg; } catch (e) {} throw new Error(`Image upload failed: ${errMsg}`); }
                        const uploadData = await uploadResp.json();
                        if (uploadData.code === 0 && uploadData.data && uploadData.data.id) fileId = uploadData.data.id; else throw new Error(uploadData.msg || "Failed to get File ID");
                        updateChatMessage(loadingMsgEl, "图片上传成功，沟通中...", false);
                        additionalMessages = [{ role: "user", content: JSON.stringify([{ type: "text", text: textForContent }, { type: "image", file_id: fileId }]), content_type: "object_string" }];
                    } else { additionalMessages = [{ role: "user", content: textForContent, content_type: "text" }]; }
                    const chatReqBody = { bot_id: COZE_BOT_ID, user_id: COZE_USER_ID, stream: false, auto_save_history: true, additional_messages: additionalMessages };
                    const chatResp = await fetch(chatUrl, { method: 'POST', headers: { 'Authorization': `Bearer ${COZE_ACCESS_TOKEN}`, 'Content-Type': 'application/json', 'Accept': 'application/json' }, body: JSON.stringify(chatReqBody) });
                    if (!chatResp.ok) { const errText = await chatResp.text(); let errMsg = `HTTP ${chatResp.status}`; try { const errJson = JSON.parse(errText); errMsg = errJson.msg || errMsg; } catch (e) {} throw new Error(`Chat API failed: ${errMsg}`); }
                    const chatData = await chatResp.json();
                    if (chatData.code === 0 && chatData.data && chatData.data.id) await cozePollCompletion(convId, chatData.data.id, loadingMsgEl);
                    else throw new Error(chatData.msg || "Invalid data from chat API");
                } catch (e) { console.error("Error sending to Coze:", e); updateChatMessage(loadingMsgEl, `请求出错: ${e.message}`, true); throw e; }
            }

            async function cozeSendMessageFromInput() {
                // ... (sendMessageFromInput logic - same as provided before, renamed to avoid conflict)
                if (!chatUserInputEl) return;
                const question = chatUserInputEl.value.trim();
                if (!question && !selectedChatImageFile) { alert("请输入消息或选择图片。"); return; }
                let userMsgDisplay = question || (selectedChatImageFile ? `[图片: ${selectedChatImageFile.name}]` : "");
                if (selectedChatImageFile && question) userMsgDisplay = `[图片: ${selectedChatImageFile.name}] ${question}`;
                addChatMessage(userMsgDisplay, 'user');
                const loadingMsgEl = addChatMessage("正在处理...", 'bot');
                chatUserInputEl.value = ''; const imageFileToSend = selectedChatImageFile; 
                if (window.cozeRemoveChatImagePreview) window.cozeRemoveChatImagePreview(); // Use namespaced remove
                try { await cozeSendImageAndText(question, imageFileToSend, loadingMsgEl); }
                catch (e) { console.error("cozeSendMessageFromInput error:", e); }
            }

            async function cozePollCompletion(conversationId, chatId, messageElementToUpdate) {
                // ... (pollForChatCompletion logic - same as provided before, renamed to avoid conflict)
                const retrieveChatUrl = `${API_URL_RETRIEVE_CHAT_DETAILS}?conversation_id=${conversationId}&chat_id=${chatId}`;
                const listMessagesUrl = `${API_URL_LIST_CONVERSATION_MESSAGES}?conversation_id=${conversationId}`;
                let attempts = 0; const maxAttempts = 30; const interval = 3000;
                updateChatMessage(messageElementToUpdate, "正在火速为您处理，请稍等...", false);
                const poll = async () => {
                    if (attempts >= maxAttempts) { updateChatMessage(messageElementToUpdate, "获取回复超时。", true); return; }
                    attempts++;
                    try {
                        const detailResp = await fetch(retrieveChatUrl, { headers: { 'Authorization': `Bearer ${COZE_ACCESS_TOKEN}` } });
                        if (!detailResp.ok) { throw new Error(`Poll details failed: HTTP ${detailResp.status}`); }
                        const detailData = await detailResp.json();
                        if (detailData.code === 0 && detailData.data) {
                            const status = detailData.data.status;
                            if (status === 'completed') {
                                const msgsResp = await fetch(listMessagesUrl, { headers: { 'Authorization': `Bearer ${COZE_ACCESS_TOKEN}` } });
                                if (!msgsResp.ok) { throw new Error(`Poll messages failed: HTTP ${msgsResp.status}`); }
                                const msgsData = await msgsResp.json();
                                if (msgsData.code === 0 && msgsData.data && msgsData.data.length > 0) {
                                    let foundAnswer = false;
                                    for (let i = msgsData.data.length - 1; i >= 0; i--) {
                                        const msg = msgsData.data[i];
                                        if (msg.chat_id === chatId && msg.role === 'assistant' && msg.type === 'answer') {
                                            updateChatMessage(messageElementToUpdate, msg.content, true); foundAnswer = true; break;
                                        }
                                    }
                                    if (!foundAnswer) updateChatMessage(messageElementToUpdate, "对话完成，未找到回复。", true);
                                } else { updateChatMessage(messageElementToUpdate, `对话完成，消息列表空: ${msgsData.msg || ''}`, true); }
                                return;
                            } else if (['failed', 'canceled'].includes(status)) { updateChatMessage(messageElementToUpdate, `对话出错: ${detailData.data.last_error?.msg || status}`, true); return;
                            } else if (['created', 'in_progress', 'requires_action'].includes(status)) { setTimeout(poll, interval);
                            } else { updateChatMessage(messageElementToUpdate, `未知状态: ${status}`, true); return; }
                        } else { throw new Error(`Poll details API error: ${detailData.msg}`); }
                    } catch (e) { console.error("Polling error:", e); updateChatMessage(messageElementToUpdate, `获取回复出错: ${e.message}`, true); }
                };
                poll();
            }
            
            function setupCozeChatEventListeners() {
                if (chatUserInputEl) {
                    chatUserInputEl.addEventListener('keydown', (e) => { if (e.key === 'Enter' && !e.shiftKey) { e.preventDefault(); cozeSendMessageFromInput(); } });
                }
                if (chatSendButtonEl) {
                    chatSendButtonEl.addEventListener('click', (e) => { e.preventDefault(); cozeSendMessageFromInput(); });
                }

                if (chatImageUploadInputEl && chatImagePreviewContainerEl) {
                    chatImageUploadInputEl.addEventListener('change', function (event) {
                        if (event.target.files && event.target.files.length > 0) {
                            selectedChatImageFile = event.target.files[0];
                            chatImagePreviewContainerEl.innerHTML = `
                            <div class="preview-item">
                                <img src="${URL.createObjectURL(selectedChatImageFile)}" alt="图片预览" class="chat-preview-image">
                                <span class="remove-preview-btn" onclick="window.cozeRemoveChatImagePreview()" title="移除图片">×</span>
                            </div>`;
                        } else { selectedChatImageFile = null; chatImagePreviewContainerEl.innerHTML = ''; }
                        event.target.value = '';
                    });
                }
                 // Expose remove function to window, namespaced
                window.cozeRemoveChatImagePreview = function () {
                    selectedChatImageFile = null;
                    if (chatImagePreviewContainerEl) chatImagePreviewContainerEl.innerHTML = '';
                };

                // "一键润色" button on the main page
                if (mainPolishTextBtnEl && chatUserInputEl) {
                    mainPolishTextBtnEl.addEventListener('click', function () {
                        if (window.editor && typeof window.editor.getText === 'function') {
                            const editorText = window.editor.getText().trim();
                            if (editorText) {
                                chatUserInputEl.value = editorText + " 一键润色";
                                chatUserInputEl.focus();
                                if (chatBoxEl && typeof chatBoxEl.scrollIntoView === 'function') {
                                   setTimeout(() => chatBoxEl.closest('.chat-container')?.scrollIntoView({ behavior: 'smooth', block: 'center' }), 100);
                                }
                            } else { alert('请先在编辑器中输入需要润色的日记内容。'); }
                        } else { alert('编辑器尚未初始化。'); }
                    });
                }

                // "插入到编辑器" logic
                if (chatBoxEl) {
                    chatBoxEl.addEventListener('click', (e) => {
                        if (e.target.classList.contains('insert-btn')) {
                            // ... (Insert to editor logic - same as provided before)
                            const messageEl = e.target.closest('.message.bot');
                            let messageTextElement = messageEl?.querySelector('.bot-message');
                            let rawHtmlContent = messageTextElement?.innerHTML || '';
                            let tempDiv = document.createElement('div'); tempDiv.innerHTML = rawHtmlContent;
                            tempDiv.querySelectorAll('.insert-btn').forEach(btn => btn.remove());
                            const cleanedHtmlContent = tempDiv.innerHTML.trim();
                            if (!cleanedHtmlContent) { alert('无法获取 AI 回复内容。'); return; }
                            if (window.editor && typeof window.editor.dangerouslyInsertHtml === 'function') {
                                try {
                                    window.editor.focus();
                                    if (window.editor.getText().trim() !== "") window.editor.dangerouslyInsertHtml('<p><br></p>');
                                    window.editor.dangerouslyInsertHtml(cleanedHtmlContent);
                                    alert('内容已插入编辑器！');
                                } catch (insertError) { console.error("Error inserting to editor:", insertError); alert("插入内容到编辑器时发生错误。"); }
                            } else {
                                const textToCopy = cleanedHtmlContent.replace(/<br\s*\/?>/gi, '\n').replace(/<[^>]+>/g, '');
                                navigator.clipboard.writeText(textToCopy)
                                    .then(() => alert('编辑器未找到。内容已复制到剪贴板。\n\n' + textToCopy))
                                    .catch(err => alert('编辑器未找到，复制到剪贴板失败。'));
                            }
                        }
                    });
                }

                // Listener for "用此图/视频提问AI"
                document.body.addEventListener('click', async function(event) {
                    const button = event.target.closest('.ask-ai-with-media-btn');
                    if (button) {
                        // ... (Ask AI with media logic - same as provided before)
                        const mediaItemElement = button.closest('.media-item');
                        if (!mediaItemElement) { alert("找不到对应的媒体项。"); return; }
                        const mediaId = mediaItemElement.id; // Assumes media-item has an ID
                        if (!mediaId) { alert("媒体项缺少ID，无法关联文件。"); return; }

                        let imageFileToUse = window.mediaFileObjects && window.mediaFileObjects[mediaId] ? window.mediaFileObjects[mediaId] : null;
                        
                        if (!imageFileToUse) { // Fallback if not in mediaFileObjects (e.g. for existing media with just URL)
                            const imgPreview = mediaItemElement.querySelector('img.media-preview, video.media-preview');
                            if (imgPreview && imgPreview.src && imgPreview.src.startsWith('blob:')) {
                                try {
                                    const response = await fetch(imgPreview.src); const blob = await response.blob();
                                    const extension = blob.type.split('/')[1] || (imgPreview.tagName === 'VIDEO' ? 'mp4' : 'jpg');
                                    imageFileToUse = new File([blob], `media_blob_${Date.now()}.${extension}`, { type: blob.type });
                                } catch (e) { console.error("Failed to fetch blob for media item:", e); }
                            } else { alert("无法获取此媒体文件进行提问。请确保新上传的媒体已暂存。"); return; }
                        }
                        if (!imageFileToUse) { alert("最终无法获取媒体文件。"); return; }

                        const imageCaptionInput = mediaItemElement.querySelector('.media-caption');
                        const imageCaption = imageCaptionInput ? imageCaptionInput.value.trim() : "";
                        const userInputInChat = chatUserInputEl ? chatUserInputEl.value.trim() : "";
                        let textPromptForCoze = userInputInChat || imageCaption || "请描述这个媒体文件并写一篇相关日记。";
                        if (userInputInChat && chatUserInputEl) chatUserInputEl.value = '';
                        addChatMessage(`[使用媒体: ${imageFileToUse.name}] ${textPromptForCoze}`, 'user');
                        const loadingMsgElement = addChatMessage("处理媒体并与AI沟通中...", 'bot');
                        button.disabled = true; button.innerHTML = '<i class="fas fa-spinner fa-spin"></i> 处理中';
                        try { await cozeSendImageAndText(textPromptForCoze, imageFileToUse, loadingMsgElement); }
                        catch (error) { /* Handled by cozeSendImageAndText */ }
                        finally { button.disabled = false; button.innerHTML = '<i class="fas fa-robot"></i> 用此图/视频提问AI'; }
                    }
                });
            }

            // Initialize Chat Assistant when DOM is ready
            if (document.readyState === 'loading') {
                document.addEventListener('DOMContentLoaded', () => {
                    initChatDOMElements();
                    setupCozeChatEventListeners();
                     if (chatBoxEl && !chatBoxEl.querySelector('.message.bot-opening')) {
                        const openingMessage = "你好啊，不会写日记？可以给我几个关键词，我来帮你生成一篇旅游日记，我也可以根据你的草稿为你润色哦。你也可以试试上传你所拍摄的图片，我来根据图片为你生成旅游日记，但请告诉我日记相关的关键词哦，比如地点、人物、事件、心情等。或者来试试文生图功能。";
                        const openingMsgElement = addChatMessage('', 'bot-opening');
                        if (openingMsgElement) simulateTypingEffect(openingMsgElement, openingMessage, false);
                    }
                });
            } else { // DOMContentLoaded has already fired
                initChatDOMElements();
                setupCozeChatEventListeners();
                 if (chatBoxEl && !chatBoxEl.querySelector('.message.bot-opening')) {
                    const openingMessage = "你好啊，不会写日记？可以给我几个关键词，我来帮你生成一篇旅游日记，我也可以根据你的草稿为你润色哦。你也可以试试上传你所拍摄的图片，我来根据图片为你生成旅游日记，但请告诉我日记相关的关键词哦，比如地点、人物、事件、心情等。或者来试试文生图功能。";
                    const openingMsgElement = addChatMessage('', 'bot-opening');
                    if (openingMsgElement) simulateTypingEffect(openingMsgElement, openingMessage, false);
                }
            }
        })(); // End of IIFE for chat assistant
    </script>
    <!-- Fallback for old Tencent Hunyuan API script (can be removed if Coze is primary) -->
    <!-- 
    <script>
        // =====智能助手功能脚本 (Tencent Hunyuan - OLD, keep for reference or remove) =====
        // ... (The old Tencent Hunyuan sendMessage, addMessage, updateMessage functions) ...
        // Note: This part was from your original EJS file's second script block.
        // It uses a different API (Tencent Hunyuan) and different functions.
        // The Coze script above is self-contained and uses its own addChatMessage, updateChatMessage etc.
        // You should decide which AI backend to use. If Coze, this old block can be removed.
    </script>
    -->
</body>
</html>